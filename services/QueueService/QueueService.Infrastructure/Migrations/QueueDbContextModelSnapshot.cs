// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QueueService.Infrastructure.Persistence;

#nullable disable

namespace QueueService.Infrastructure.Migrations
{
    [DbContext(typeof(QueueDbContext))]
    partial class QueueDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QueueService.Domain.Entities.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages");
                });

            modelBuilder.Entity("QueueService.Domain.Entities.QueueItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CalledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DepartmentId")
                        .HasMaxLength(50)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("EstimatedWaitTime")
                        .HasColumnType("time");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("QueueNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("SkippedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CancelledAt")
                        .HasDatabaseName("IX_QueueItems_CancelledAt");

                    b.HasIndex("SkippedAt")
                        .HasDatabaseName("IX_QueueItems_SkippedAt");

                    b.HasIndex("PatientId", "Status")
                        .HasDatabaseName("IX_QueueItems_PatientId_Status");

                    b.HasIndex("DepartmentId", "Status", "Position")
                        .HasDatabaseName("IX_QueueItems_Department_Status_Position");

                    b.HasIndex("DoctorId", "Status", "Position")
                        .HasDatabaseName("IX_QueueItems_DoctorId_Status_Position");

                    b.ToTable("QueueItems", (string)null);
                });

            modelBuilder.Entity("QueueService.Domain.Entities.QueueItem", b =>
                {
                    b.OwnsOne("QueueService.Domain.ValueObjects.DoctorInfo", "DoctorInfo", b1 =>
                        {
                            b1.Property<Guid>("QueueItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("QueueItemId");

                            b1.ToTable("QueueItems");

                            b1.WithOwner()
                                .HasForeignKey("QueueItemId");
                        });

                    b.OwnsOne("QueueService.Domain.ValueObjects.PatientInfo", "PatientInfo", b1 =>
                        {
                            b1.Property<Guid>("QueueItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("QueueItemId");

                            b1.ToTable("QueueItems");

                            b1.WithOwner()
                                .HasForeignKey("QueueItemId");
                        });

                    b.Navigation("DoctorInfo")
                        .IsRequired();

                    b.Navigation("PatientInfo")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
